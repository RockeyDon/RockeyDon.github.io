<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.1+2.2=?</title>
    <url>/2024/05/06/1-1-2-2/</url>
    <content><![CDATA[<p>在计算机中，默认使用二进制进行保存和计算。</p>
<p>当我们提到<em>1.1</em>时，实际上是指的二进制数<em>1.0001100110011010</em>，只不过以十进制的形式表示出来；</p>
<p>同样地，<em>2.2</em>表示的是二进制数<em>10.0011001100110011</em>，同样以十进制的形式呈现；</p>
<p>将这两个数相加得到的二进制数为<em>11.0100110011001101</em>，再将其以十进制格式显示出来，即为<em>3.3000000000000003</em></p>
]]></content>
      <categories>
        <category>基础知识</category>
      </categories>
      <tags>
        <tag>Decimal</tag>
      </tags>
  </entry>
  <entry>
    <title>ChoiceField</title>
    <url>/2024/05/06/ChoiceField/</url>
    <content><![CDATA[<p>在Django的Models文件中，有时候会出现数字或字符串类型需要使用枚举值的情况。</p>
<p>Django官方推荐的choice field定义通常如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YearInSchool</span>:</span><br><span class="line">    FRESHMAN = <span class="string">&#x27;FR&#x27;</span></span><br><span class="line">    SOPHOMORE = <span class="string">&#x27;SO&#x27;</span></span><br><span class="line">    JUNIOR = <span class="string">&#x27;JR&#x27;</span></span><br><span class="line">    SENIOR = <span class="string">&#x27;SR&#x27;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">    (YearInSchool.FRESHMAN, <span class="string">&#x27;Freshman&#x27;</span>),</span><br><span class="line">    (YearInSchool.SOPHOMORE, <span class="string">&#x27;Sophomore&#x27;</span>),</span><br><span class="line">    (YearInSchool.JUNIOR, <span class="string">&#x27;Junior&#x27;</span>),</span><br><span class="line">    (YearInSchool.SENIOR, <span class="string">&#x27;Senior&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    year_in_school = models.CharField(max_length=<span class="number">2</span>, choices=YEAR_IN_SCHOOL_CHOICES, default=YearInSchool.FRESHMAN)</span><br></pre></td></tr></table></figure>

<p>显然，<em>YEAR_IN_SCHOOL_CHOICES</em>重新引用了一遍<em>YearInSchool</em>是冗余的。</p>
<p>更好的方法是，通过定制元类，使类<em>YearInSchool</em>支持按照<em>YEAR_IN_SCHOOL_CHOICES</em>的格式遍历其属性，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, EnumMeta</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceEnumMeta</span>(<span class="title class_ inherited__">EnumMeta</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">cls, name</span>):</span><br><span class="line">        attr = <span class="built_in">super</span>().__getattribute__(name)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(attr, Enum):</span><br><span class="line">            <span class="keyword">return</span> attr.value</span><br><span class="line">        <span class="keyword">return</span> attr</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> ((tag.value, tag.name) <span class="keyword">for</span> tag <span class="keyword">in</span> <span class="built_in">super</span>().__iter__())</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChoiceEnum</span>(Enum, metaclass=ChoiceEnumMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Enum for Django ChoiceField use.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">YearInSchool</span>(<span class="title class_ inherited__">ChoiceEnum</span>):</span><br><span class="line">    FRESHMAN = <span class="string">&#x27;FR&#x27;</span></span><br><span class="line">    SOPHOMORE = <span class="string">&#x27;SO&#x27;</span></span><br><span class="line">    JUNIOR = <span class="string">&#x27;JR&#x27;</span></span><br><span class="line">    SENIOR = <span class="string">&#x27;SR&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    year_in_school = models.CharField(max_length=<span class="number">2</span>, choices=YearInSchool, default=YearInSchool.FRESHMAN)</span><br></pre></td></tr></table></figure>

<p>这样，无需再单独定义<em>YEAR_IN_SCHOOL_CHOICES</em>，而是直接通过<em>YearInSchool</em>来获取选项列表。</p>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Model</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask添加404页</title>
    <url>/2024/05/06/Flask%E6%B7%BB%E5%8A%A0404%E9%A1%B5/</url>
    <content><![CDATA[<p>当使用 Flask 时，默认情况下是没有找不到路由的提示的。这在刚开始接触 Flask 时可能会让调试接口变得非常困难。</p>
<p>可以通过手动添加一个特定的视图来改善这个情况，以便在出现路由错误时显示所有当前生效的路由。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.exceptions <span class="keyword">import</span> NotFound</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params">NotFound</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">url_not_found</span>(<span class="params">err</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理路由404错误&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_routes</span>():</span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> rule <span class="keyword">in</span> app.url_map.iter_rules():</span><br><span class="line">            methods = <span class="string">&#x27;, &#x27;</span>.join(rule.methods)</span><br><span class="line">            options = &#123;arg: <span class="string">&quot;[&#123;0&#125;]&quot;</span>.<span class="built_in">format</span>(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> rule.arguments&#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;pk&quot;</span> <span class="keyword">in</span> options:</span><br><span class="line">                options[<span class="string">&quot;pk&quot;</span>] = <span class="number">1</span></span><br><span class="line">            url = url_for(rule.endpoint, **options)</span><br><span class="line">            line = urllib.parse.unquote(<span class="string">&quot;&#123;:50s&#125; &#123;:20s&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(rule.endpoint, methods, url))</span><br><span class="line">            result.append(line)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(code=<span class="number">404</span>, message=<span class="built_in">str</span>(err), routes=list_routes()), <span class="number">404</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>View</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask添加多Content-Type适配</title>
    <url>/2024/05/06/Flask%E6%B7%BB%E5%8A%A0%E5%A4%9AContent-Type%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<p>当使用 Flask 时，默认情况下是不支持多Content-Type解析的。可以手动为 Flask 添加一套解析函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">content_type = request.content_type.split(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> content_type == <span class="string">&#x27;application/json&#x27;</span>:</span><br><span class="line">    body = request.get_json()</span><br><span class="line"><span class="keyword">elif</span> content_type == <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span> <span class="keyword">or</span> content_type == <span class="string">&#x27;multipart/form-data&#x27;</span>:</span><br><span class="line">    body = <span class="built_in">dict</span>(request.form)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> FError(code=FCode.UnsupportedMedia, msg=<span class="string">f&quot;Request content-type <span class="subst">&#123;content_type&#125;</span> not supported&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>apt update的NO_PUBKEY报错</title>
    <url>/2024/05/06/apt-update%E7%9A%84NO-PUBKEY%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>在执行 <code>apt update</code> 时，有时会遇到以下报错信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY 1234ABCD</span><br></pre></td></tr></table></figure>

<p>通常情况下，我们只需要在更新之前执行以下命令即可解决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1234ABCD</span><br></pre></td></tr></table></figure>

<p>但是……这条命令是要调用gpg的，如果没安装，就会失败，并提示安装gnupg&#x2F;gnupg2</p>
<p>而执行apt install gnupg2安装需要先加key，这就死锁了……</p>
<p>解决思路：加key一定要gpg，但安装gpg可以不用key。</p>
<p>用apt离线安装，先确定发行版本，然后下载一个同版本的普通Linux镜像启动，然后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install --download-only gnupg2</span><br></pre></td></tr></table></figure>
<p>这样软件和依赖就会被下载到*&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives*</p>
<p>然后用tar打包，<span style="color:red">一定不要用zip</span>！因为普通的Linux可能没有zip，如果现在安装，前面下载的包就没了。而且没有gpg的镜像大概率也没有unzip。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar –czf package.tar.gz /var/cache/apt/archives/*</span><br></pre></td></tr></table></figure>

<p>docker cp从镜像中复制出来，再ADD进原镜像。然后离线安装不用key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ADD package.tar.gz /opt/gnupg/</span><br><span class="line">RUN dpkg -i /opt/gnupg/archives/*.deb</span><br></pre></td></tr></table></figure>

<p>至此，就可以加key再apt update了</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker踩坑</title>
    <url>/2024/05/06/docker%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><p>如果使用ARM芯片，务必要确认自己的镜像架构</p>
<p>默认会尝试拉取ARM的镜像，需要加参数指定x86</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull --platform linux/arm64 alpine:latest</span><br><span class="line">docker build --platform linux/arm64 -t $&#123;tag&#125; -f &#123;file&#125; .</span><br></pre></td></tr></table></figure>

<p>对于现有的镜像，没有简便方法查看架构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect --format &quot;&#123;&#123;.ID&#125;&#125; &#123;&#123;.RepoTags&#125;&#125; &#123;&#123;.Architecture&#125;&#125;&quot; $(docker image ls -q)</span><br></pre></td></tr></table></figure>

<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>容器内<em>localhost</em>指向的是容器自己而不是宿主机</p>
<h1 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h1><p>应该挂载文件夹，而不是文件。除非这个文件不改动</p>
<p>因为某些软件(如Vim)修改文件时，不会真的修改文件内容，而是创建一个新文件，然后用新的替换旧的。这样就造成docker挂载指针丢失</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>离线使用私有镜像时，注意修改hosts文件，让私有域名指向本机</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>删除docker stack时，docker网络最容易出错。</p>
<p>docker网络会在docker stack删除后自动删除，需要docker network ls确认已删除后才能再次启动stack</p>
<p>如果docker网络删除出错，能看到network id却无法删除，按照以下步骤操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect &lt;id&gt; or &lt;name&gt;  // 查看删不掉的网络</span><br><span class="line"></span><br><span class="line">// 在里面找到所有的container，包括默认那个</span><br><span class="line"></span><br><span class="line">// 切断仍在引用网络的容器，以下三个命令都试试</span><br><span class="line">docker network disconnect -f &lt;networkID&gt; &lt;endpointName&gt;</span><br><span class="line">docker network disconnect -f &lt;networkID&gt; &lt;endpointId&gt;</span><br><span class="line">docker network disconnect -f &lt;networkID&gt; &lt;containerId&gt;</span><br><span class="line">// 如果容器还在顺便也删掉</span><br><span class="line">docker network prune // 如果成功会打印此命令移除了哪个network</span><br></pre></td></tr></table></figure>

<h1 id="层文件"><a href="#层文件" class="headerlink" title="层文件"></a>层文件</h1><p>docker镜像添加了一个敏感文件，后面又删掉了，那这个文件能被取到吗？</p>
<p>能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 首先把镜像打包保存</span><br><span class="line">docker save docker/example -o example.tar</span><br><span class="line">// 然后解包</span><br><span class="line">tar xf example.tar</span><br><span class="line">// 得到几个信息文件，和一堆sha名字的文件夹，每个里面有个layer.tar，即每个层</span><br><span class="line">// 逐个继续解包。或者根据文件名找文件</span><br><span class="line">for layer in */layer.tar; do tar -tf $layer | grep 特定文件 &amp;&amp; echo $layer; done</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle踩坑</title>
    <url>/2024/05/06/oracle%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>虽然 Oracle 可以不使用客户端连接，但这样只能使用其“最基本”的功能，例如搜索中文字段就无法实现。因此，在大多数情况下，我们仍然需要使用客户端来完成更多复杂的操作。</p>
<h1 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h1><p>首先，直接在 Oracle 官网注册并下载基本版本的客户端。然后，可能会遇到一些依赖缺失的问题，需要手动安装缺失的依赖项。</p>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><p>与 MySQL 相比，Oracle 具有一个特殊的数据类型叫做 LOB（Large Object）。当数据较大时，使用 <code>cursor.execute()</code> 执行查询时返回的是 LOB 对象而不是字符串。需要通过 <code>read()</code> 方法才能获取结果。</p>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>在编写 SQL 语句时，字段名的别名需要使用 <code>AS</code> 关键字来指定，而表名的别名则不需要。在简单的情况下，可以直接使用 <code>SELECT</code> 加上字段名进行查询，但是在涉及到多表连接的情况下，则需要明确指定表名和字段名的组合。</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres踩坑</title>
    <url>/2024/05/06/postgres%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h1><p>默认情况下，PostgreSQL 的用户名和密码是 <strong>postgres:postgres</strong>。在使用 <code>COPY</code> 命令进行文件导入时，需要注意修改文件的权限以确保数据库用户有权限读取文件。</p>
<h1 id="数据目录"><a href="#数据目录" class="headerlink" title="数据目录"></a>数据目录</h1><p>在首次启动 PostgreSQL 时，要求数据目录必须是空的。但是如果想要将数据目录纳入 Git 追踪，目录中必须至少包含一个文件。为了解决这个问题，你可以参考<a class="link"   href="https://stackoverflow.com/a/77820566/15870093" >这里<i class="fas fa-external-link-alt"></i></a>的方法。</p>
<p>具体而言，可以让 Git 追踪目录 A（其中包含了 .gitignore 文件），然后指定 PostgreSQL 使用 A 目录下的 B 目录作为数据目录（PostgreSQL 会自动创建该目录）。这样可以在满足 PostgreSQL 启动要求的同时，也可以将数据目录纳入 Git 追踪。</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>uuid1和uuid4区别</title>
    <url>/2024/05/06/uuid1%E5%92%8Cuuid4%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>uuid1：和机器、时间有关(适合排序)。在超短时间内创建太多个就会重复。</p>
<p>uuid4：随机数。始终有极小概率重复，和创建速度无关。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
  </entry>
  <entry>
    <title>什么是守护线程</title>
    <url>/2024/05/06/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>守护线程，不是它保护了谁。。。它更像是被保护的</p>
<p>守护线程是一种特殊类型的线程，它的生命周期与主线程（或者称为非守护线程）相关联。当所有的非守护线程结束时，程序也就终止了，同时会杀死进程中的所有守护线程。</p>
<p>守护线程的特点是，它们在后台默默地执行，不会阻止程序的退出。换句话说，即使守护线程还在运行，主线程退出时也会终止整个程序，而不管守护线程是否完成了任务。</p>
<p>因此，守护线程通常用于执行一些与主程序运行无关的后台任务，比如监控、日志记录等。它们的存在可以确保在主程序退出时，清理一些资源或执行一些收尾工作，而无需手动管理线程的状态。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
  </entry>
  <entry>
    <title>优化GPT的输出结果</title>
    <url>/2024/05/14/%E4%BC%98%E5%8C%96GPT%E7%9A%84%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C/</url>
    <content><![CDATA[<h1 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h1><p>当使用 ChatGPT 时，通常输出的是一段聊天式内容。第一步是规范输出，以获得更开发友好的结果。</p>
<p>一种方法是 Zero-Shot 学习，即在系统中指定“输出格式”，比如“返回结果列表，列表元素为 JSON”，或者“如果是正面则返回字母 P，如果是负面则返回字母 N，如果无法识别则返回字母 U。”。需要注意约定空和异常情况。</p>
<p>如果结果不理想，另一种方法是 Few-Shot 学习，在系统中提供一些例子，给出输入和对应的输出，同时限制键名和值的枚举。</p>
<p>此外，输入应尽可能完整，包含获取结果所需的所有信息。信息越完整，效果就越好。例如，根据代码生成单元测试就是一个很好的例子。</p>
<h1 id="逻辑链"><a href="#逻辑链" class="headerlink" title="逻辑链"></a>逻辑链</h1><p>如果结果仍然不理想，考虑是否逻辑链太复杂。可以在 Few-Shot 学习中完整解释中间推理过程。</p>
<h1 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h1><p>如果遇到一些 GPT 无法处理的领域，比如求解公式、编写代码、检查配置准确性等，可以使用 langchain 的 Agent 结合外部工具。GPT 可以推理出自己需要调用工具，然后主动调用并获取结果。</p>
<h1 id="Finetune"><a href="#Finetune" class="headerlink" title="Finetune"></a>Finetune</h1><p>最后可以考虑进行微调。</p>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>GPT</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Ubuntu</title>
    <url>/2024/05/06/%E5%AE%89%E8%A3%85Ubuntu/</url>
    <content><![CDATA[<h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><p>首先，准备一个外接存储设备（如U盘），并将下载的 ISO 镜像刻录至其中。</p>
<p>这个外接存储设备需要长期保留，因为如果系统发生崩溃，你可能需要用它来修复系统。</p>
<h1 id="硬盘分区"><a href="#硬盘分区" class="headerlink" title="硬盘分区"></a>硬盘分区</h1><p>在进行 Linux 初次安装时，你可以只设置四个挂载点，均使用 ext4 文件系统：</p>
<ul>
<li>&#x2F;boot：存放引导文件。</li>
<li>&#x2F;home：用于存放用户文件。</li>
<li>&#x2F;usr：存放系统文件。</li>
<li>&#x2F;：根目录，除了上述挂载点以外的其他内容。</li>
</ul>
<p>其中，&#x2F;boot 可以设置得比较小，而其他挂载点的大小则根据实际需求来划分。</p>
<p>除了上述的挂载点外，不要为 <strong>&#x2F;var</strong> 设置分区，否则在使用 boot-repair 进行 dpkg 修复时可能会失败。</p>
<p>另外，你还可以设置一个 <strong>swap</strong> 分区（格式为 swap），类似于虚拟内存和休眠存储的功能。它的大小一般应与你的物理内存大小相当即可。</p>
<h1 id="显卡驱动"><a href="#显卡驱动" class="headerlink" title="显卡驱动"></a>显卡驱动</h1><p>在没有正确安装显卡驱动的情况下，打开系统设置可能会导致屏幕一闪而过变黑，甚至可能导致 GNOME 桌面环境崩溃。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt search nvidia-driver</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install 名称</span><br></pre></td></tr></table></figure>
<p>一旦完成安装，记得关闭自动更新功能，否则系统可能会自动更新并可能损坏显卡驱动。</p>
<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>在 Ubuntu 18 中，通常只能安装 Python 3.6，而在 Ubuntu 20 中，通常只能安装 Python 3.8。但通过使用 pyenv，你可以轻松安装任意版本的 Python。</p>
<p>首先，你需要下载 pyenv。建议直接从 <a class="link"   href="https://github.com/pyenv/pyenv" >https://github.com/pyenv/pyenv<i class="fas fa-external-link-alt"></i></a> 下载文件，并将其放置在 ~&#x2F;.pyenv 路径下。</p>
<p>然后，你需要设置 bash，以便在启动时初始化 pyenv。在 ~&#x2F;.bashrc 文件的末尾添加以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br></pre></td></tr></table></figure>
<p>保存并关闭文件。打开一个新的终端窗口，就可以开始使用了。但是请注意，尚不能直接安装 Python，因为这是通过源码安装，下载可能会很困难。</p>
<p>首先，你需要安装编译依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev</span><br></pre></td></tr></table></figure>

<p>然后，从 <a class="link"   href="https://www.python.org/ftp/python/" >https://www.python.org/ftp/python/<i class="fas fa-external-link-alt"></i></a> 下载你需要的 Python 版本（选择 tar.xz 格式），并将其放置在 ~&#x2F;.pyenv&#x2F;cache&#x2F; 目录下。接着，你可以使用缓存中的文件进行安装。</p>
<h1 id="安装双系统"><a href="#安装双系统" class="headerlink" title="安装双系统"></a>安装双系统</h1><ul>
<li>请务必避免对 Windows 进行更新、重装或修改引导配置，否则下面的步骤可能失效。</li>
<li>在 BIOS 设置中，将启动模式配置为 UEFI，并将 U 盘设置为启动优先。</li>
<li>使用刚才制作的启动盘启动计算机，选择 <strong>试用Ubuntu</strong> ，然后按照如下操作：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install boot-repair -y</span><br></pre></td></tr></table></figure></li>
<li>安装完成后，运行 boot-repair 工具。</li>
</ul>
]]></content>
      <categories>
        <category>软件推荐</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>实用开发软件合集</title>
    <url>/2024/05/06/%E5%AE%9E%E7%94%A8%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h1 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h1><h2 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h2><ul>
<li><span style="color:green">类似Windows的操作方式，直观看到所有文件和层级，不用一步一个ls命令</span></li>
<li><span style="color:green">支持窗口拖拽，传文件不用手打scp&#x2F;rz命令</span></li>
<li><span style="color:green">免费版支持保存10个连接</span></li>
<li><span style="color:orange">仅支持Windows</span></li>
<li><span style="color:orange">FTP窗口的操作都是单个文件遍历式操作</span></li>
</ul>
<h1 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h1><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><ul>
<li><span style="color:green">支持配置预处理和后处理脚本</span></li>
<li><span style="color:green">支持输出文档</span></li>
<li><span style="color:green">免费版支持3人共享一个接口集合</span></li>
<li><span style="color:green">可以对大JSON做beautiful print(HBuilder会卡死、PyCharm会崩溃)</span></li>
<li><span style="color:orange">不支持并发测试</span></li>
</ul>
<h2 id="ApiPost"><a href="#ApiPost" class="headerlink" title="ApiPost"></a>ApiPost</h2><ul>
<li><span style="color:green">操作类似Postman</span></li>
<li><span style="color:green">中文客服在线</span></li>
<li><span style="color:green">支持并发测试</span></li>
</ul>
<h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><ul>
<li><span style="color:green">通过网页管理镜像、服务和容器</span></li>
<li><span style="color:green">滚动显示正常(DockerDesktop滚动显示错乱)</span></li>
<li><span style="color:green">批量移除正常(DockerDesktop批量移除报错)</span></li>
<li><span style="color:orange">本地需要配置认证有效时间，不然总要登录</span></li>
</ul>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h2><ul>
<li><span style="color:green">可视化查看git各个分支</span></li>
<li><span style="color:orange">仅限WIndows和Mac</span></li>
</ul>
<h1 id="数据库GUI"><a href="#数据库GUI" class="headerlink" title="数据库GUI"></a>数据库GUI</h1><h2 id="DBeaver"><a href="#DBeaver" class="headerlink" title="DBeaver"></a>DBeaver</h2><ul>
<li><span style="color:green">查看时表里有超长字符串字段也不会卡死(navicat会)</span></li>
<li><span style="color:green">导出全表时每张表一个INSERT(Data Grip每行产生一个INSERT，导入慢死)</span></li>
</ul>
<h1 id="MAC滚轮纠正"><a href="#MAC滚轮纠正" class="headerlink" title="MAC滚轮纠正"></a>MAC滚轮纠正</h1><h2 id="Scroll-Reverser"><a href="#Scroll-Reverser" class="headerlink" title="Scroll Reverser"></a>Scroll Reverser</h2><ul>
<li><span style="color:green">纠正Mac的鼠标滚轮方向，同时不改变触摸板方向</span></li>
</ul>
]]></content>
      <categories>
        <category>软件推荐</category>
      </categories>
  </entry>
  <entry>
    <title>算数处理</title>
    <url>/2024/05/06/%E7%AE%97%E6%95%B0%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>为了更轻松地编写与计算相关的代码，我们需要使用 Decimal 并进行适当的设置。</p>
<p>通常，我们可以设置以下功能：</p>
<ul>
<li>奇进偶舍：对于四舍五入，确保小数部分的舍入方式符合预期。</li>
<li>除零不报错：在除法运算中，避免因除以零而引发错误，而是返回适当的结果。</li>
<li>整数直接返回：当计算结果为整数时，返回整数而不带小数部分。</li>
<li>小数保留至多两位：限制小数的位数，通常保留两位小数。</li>
<li>特殊值返回null：对于特殊的计算结果，如无穷大（Inf）、负无穷大（-Inf）、非数字（NaN），统一返回 null 而不是异常值。</li>
</ul>
<p>以 Flask 为例，可以通过中间件来实现这些设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">from</span> flask.json <span class="keyword">import</span> JSONEncoder</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_decimal</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;设置decimal为奇进偶舍，且 x / 0 不报错&quot;&quot;&quot;</span></span><br><span class="line">    decimal.setcontext(decimal.ExtendedContext)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomJsonEncoder</span>(<span class="title class_ inherited__">JSONEncoder</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应编码器&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">default</span>(<span class="params">self, o</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, date):</span><br><span class="line">            <span class="keyword">return</span> o.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(o, Decimal):</span><br><span class="line">            places = o.as_tuple().exponent</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(places, <span class="built_in">int</span>) <span class="keyword">and</span> places != <span class="number">0</span>:  <span class="comment"># 小数保留至多两位</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">float</span>(<span class="string">&quot;%.2f&quot;</span> % o)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(places, <span class="built_in">int</span>):  <span class="comment"># 整数直接返回</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>(o)</span><br><span class="line">            <span class="keyword">elif</span> places == <span class="string">&#x27;F&#x27;</span> <span class="keyword">or</span> places == <span class="string">&#x27;n&#x27;</span>:  <span class="comment"># 特殊值返回null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">float</span>(o)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().default(o)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app.json_encoder = CustomJsonEncoder</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>Decimal</tag>
      </tags>
  </entry>
  <entry>
    <title>设计一个配置中心</title>
    <url>/2024/05/14/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<p>在微服务架构中，不同的微服务可能会共享一些配置信息。在简单的场景下，这些配置可以直接放置在相同的位置并由各个微服务共同使用。但是，当配置需要频繁修改或者需要动态管理时，就需要引入配置中心。</p>
<p>配置中心是一个集中管理和存储配置信息的地方，它可以帮助管理大规模微服务的配置，并提供统一的接口供微服务访问。</p>
<p>配置中心的优势包括：</p>
<ul>
<li><p>集中管理：将所有配置集中存储，方便管理和维护。</p>
</li>
<li><p>动态更新：可以动态地更新配置信息，微服务无需重启即可获取最新配置。</p>
</li>
<li><p>版本控制：可以对配置进行版本控制，方便回滚和追踪变更。</p>
</li>
<li><p>权限控制：可以根据用户或角色设置不同的权限，保障配置信息的安全性。</p>
</li>
<li><p>灵活性：支持多种配置格式和数据源，适应不同的需求和场景。</p>
</li>
</ul>
<p>微服务的配置中心应该包含以下内容：</p>
<ul>
<li><p>应用：每个配置属于不同的应用，需要标识应用的名称或唯一标识。</p>
</li>
<li><p>环境：包括 SaaS、DEV、UAT、BVT、PRO 等环境，不同环境可能有不同的配置，应该能够灵活切换。</p>
</li>
<li><p>配置项：每个配置项应该具有键值对的形式，参考环境变量，全部使用字符串的键值对，各个应用自行处理数据类型。</p>
</li>
<li><p>辅助字段：包括备注、创建时间、修改时间等辅助信息，有助于管理和追踪配置的变化。</p>
</li>
<li><p>公共配置：可以预设一个“公共”应用，其他应用继承其配置，简化配置管理。</p>
</li>
<li><p>分支：针对存在多套不同 git 分支的环境，需要增加“分支”字段来作区分。</p>
</li>
<li><p>功能：提供增删改查的功能，可以通过 Django-admin 等工具完成。</p>
</li>
</ul>
<p>如何让各个应用更新配置？有两种方案：</p>
<ol>
<li>配置中心提供接口：<ul>
<li>热更新配置：配置中心提供一个接口，应用在每次使用配置时通过该接口获取最新的配置信息。这样可以实现热更新配置，确保应用在运行过程中始终使用最新的配置。</li>
<li>无需热更新的应用：对于不需要热更新配置的应用，在启动时从配置中心获取配置信息即可，不需要频繁请求更新配置。</li>
</ul>
</li>
<li>应用提供接口：<ul>
<li>配置下发：配置中心根据需要将配置下发到各个应用，应用提供一个接口来接收配置信息并进行更新。这种方式可以减少热更新配置的无效调用，同时也可以根据需要控制配置的下发时机和频率。</li>
</ul>
</li>
</ol>
<p>接口内容上，如果配置较少，可以一次性将所有配置打包发送给应用。但如果配置较多，可以考虑分块发送或者只发送变更的部分，以减少网络开销和提高效率。</p>
<p>无论采用哪种方案，都需要对应用进行改造以适配新的配置管理方式。</p>
]]></content>
      <categories>
        <category>最佳实践</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>零宽正则</title>
    <url>/2024/05/06/%E9%9B%B6%E5%AE%BD%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<p>在 Python 中，正则表达式通常用于判断内容是否匹配，并且如果匹配成功，会输出匹配的全部内容。但是，也有一些高级正则表达式，可以只返回符合特定“匹配规则”的部分内容。这些被称为“零宽正则”。</p>
<h1 id="前向肯定"><a href="#前向肯定" class="headerlink" title="前向肯定"></a>前向肯定</h1><p>pattern之后的字符必须是exp。</p>
<p>语法为<em>pattern(?&#x3D;exp)</em></p>
<p>示例：搜索单个数字，且这个数字后面必须是”ab”(得到2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search(&#x27;\d(?=ab)&#x27;, &#x27;1a2ab3&#x27;)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"># 后向肯定</span><br><span class="line">pattern之前的字符必须是exp。</span><br><span class="line"></span><br><span class="line">语法为*(?&lt;=exp)pattern*</span><br><span class="line"></span><br><span class="line">示例：搜索单个数字，且这个数字前面必须是&quot;ab&quot;(得到3)</span><br></pre></td></tr></table></figure>
<p>search(‘(?&lt;&#x3D;ab)\d’, ‘1a2ab3’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 前向否定</span><br><span class="line">pattern之后的字符不能是exp。</span><br><span class="line"></span><br><span class="line">语法为*pattern(?!ab)*</span><br><span class="line"></span><br><span class="line">示例：搜索单个数字，且这个数字后面不能是&quot;ab&quot;(得到1)</span><br></pre></td></tr></table></figure>
<p>search(‘\d(?!ab)’, ‘1a2ab’)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 后向否定</span><br><span class="line">pattern之前的字符不能是exp。</span><br><span class="line"></span><br><span class="line">语法为*(?&lt;!exp)pattern*</span><br><span class="line"></span><br><span class="line">示例：搜索单个数字，且这个数字前面不能是&quot;ab&quot;(得到2)</span><br></pre></td></tr></table></figure>
<p>search(‘(?&lt;!ab)\d’, ‘a2ab3’)</p>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>零宽正则</tag>
      </tags>
  </entry>
</search>
